cmake_minimum_required(VERSION 3.25)
set(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake/" ${CMAKE_MODULE_PATH})
option(USE_CUDA "Enable CUDA support" OFF)
option(USE_HIP "Enable HIP support" ON)

if(USE_CUDA AND USE_HIP)
    message(FATAL_ERROR "Cannot enable both CUDA and HIP simultaneously. Choose one.")
endif()

if(USE_HIP)
    if(NOT DEFINED CMAKE_CXX_COMPILER)
        set(CMAKE_CXX_COMPILER "hipcc" CACHE STRING "HIP C++ Compiler" FORCE)
    endif()
    
    project(Spatter VERSION 2.0.0 LANGUAGES CXX HIP)
    
    set(GPU_TARGETS "gfx940;gfx90a" CACHE STRING "List of target GPU architectures")
    set(CMAKE_HIP_ARCHITECTURES "${GPU_TARGETS}")
    
    add_compile_definitions(HIP_PRINTF_ENABLE=1)
    
    find_package(HIP REQUIRED)
    include(pkgs/HIPSupport)
    
    message(STATUS "HIP compiler: ${HIP_HIPCC_EXECUTABLE}")
    message(STATUS "HIP runtime: ${HIP_RUNTIME}")
    message(STATUS "HIP target architectures: ${CMAKE_HIP_ARCHITECTURES}")
endif()

if(USE_CUDA)
	project(Spatter VERSION 2.0.0 LANGUAGES CXX CUDA)
    
    set(CMAKE_CUDA_ARCHITECTURES "70;75;80" CACHE STRING "CUDA GPU architectures")
    set(CMAKE_CXX_STANDARD 17)
    set(CMAKE_CXX_STANDARD_REQUIRED on) 
    include(pkgs/CUDASupport)
    
    message(STATUS "CUDA compiler: ${CMAKE_CUDA_COMPILER}")
    message(STATUS "CUDA target architectures: ${CMAKE_CUDA_ARCHITECTURES}")
endif()

include(DisableIntree)
include(GNUInstallDirs)
include(BuildType)
include(CompilerType)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

include(pkgs/JSONSupport)
include(pkgs/MPISupport)
include(pkgs/OpenMPSupport)

add_executable(gz_read standard-suite/binary-traces/gz_read.cc)
target_link_libraries(gz_read PRIVATE z)

add_subdirectory(src)
enable_testing()
add_subdirectory(tests)
