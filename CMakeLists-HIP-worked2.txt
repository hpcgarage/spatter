cmake_minimum_required(VERSION 3.25)

# Option 1: Force hipcc as the C++ compiler if not already set.
if(NOT DEFINED CMAKE_CXX_COMPILER)
  set(CMAKE_CXX_COMPILER "hipcc" CACHE STRING "HIP C++ Compiler" FORCE)
endif()

set(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake/" ${CMAKE_MODULE_PATH})
include(DisableIntree)

# ================================================================
# MOST IMPORTANT CHANGES: Enable HIP and set GPU architectures
# ================================================================
project(Spatter VERSION 2.0.0 LANGUAGES CXX HIP)  # Add "HIP" to project languages

# Set target GPU architectures (MI200/MI250 = gfx90a)
set(GPU_TARGETS "gfx90a" CACHE STRING "List of target GPU architectures")
set(CMAKE_HIP_ARCHITECTURES "${GPU_TARGETS}")  # Tell HIP to compile for these GPUs
# ================================================================

include(GNUInstallDirs)
include(BuildType)
include(CompilerType)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Include support modules for other libraries.
include(pkgs/JSONSupport)
include(pkgs/MPISupport)
include(pkgs/OpenMPSupport)

# Find HIP (already in your code, but works better after setting architectures)
find_package(HIP REQUIRED)
include(pkgs/HIPSupport)  # Ensure this uses CMAKE_HIP_ARCHITECTURES

# Optionally, print some information about HIP.
message(STATUS "HIP compiler: ${HIP_HIPCC_EXECUTABLE}")
message(STATUS "HIP runtime: ${HIP_RUNTIME}")
message(STATUS "HIP target architectures: ${CMAKE_HIP_ARCHITECTURES}")

# Rest of your code remains unchanged...
add_executable(gz_read standard-suite/binary-traces/gz_read.cc)
target_link_libraries(gz_read PRIVATE z)
add_subdirectory(src)
enable_testing()
add_subdirectory(tests)
