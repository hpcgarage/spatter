# Spatter/src/Spatter/CMakeLists.txt
if (USE_CUDA)
    add_library(cuda_backend SHARED CudaBackend.cu)
    set_target_properties(cuda_backend PROPERTIES CUDA_RUNTIME_LIBRARY Shared)
    set(BACKEND_INCLUDE_FILES CudaBackend.hh)

    set(CONFIGURATION_SOURCE Configuration.cc)
    set(CONFIGURATION_HEADER Configuration.hh)
    set(INPUT_HEADER Input.hh)
    set(JSONPARSER_SOURCE JSONParser.cc)
    set(JSONPARSER_HEADER JSONParser.hh)
    set(PATTERNPARSER_SOURCE PatternParser.cc)
    set(PATTERNPARSER_HEADER PatternParser.hh)
    set(SPATTERTYPES_HEADER SpatterTypes.hh)
    set(ALIGNEDALLOCATOR_HEADER AlignedAllocator.hh)
    set(TIMER_SOURCE Timer.cc)
    set(TIMER_HEADER Timer.hh)

elseif (USE_HIP)
    add_library(hip_backend SHARED HipBackend.cpp)
    set(BACKEND_INCLUDE_FILES HipBackend.hh)

    set(CONFIGURATION_SOURCE Configuration.hip.cc)
    set(CONFIGURATION_HEADER Configuration.hip.hh)
    set(INPUT_HEADER Input.hip.hh)
    set(JSONPARSER_SOURCE JSONParser.hip.cc)
    set(JSONPARSER_HEADER JSONParser.hip.hh)
    set(PATTERNPARSER_SOURCE PatternParser.hip.cc)
    set(PATTERNPARSER_HEADER PatternParser.hip.hh)
    set(SPATTERTYPES_HEADER SpatterTypes.hip.hh)
    set(ALIGNEDALLOCATOR_HEADER AlignedAllocator.hip.hh)
    set(TIMER_SOURCE Timer.hip.cc)
    set(TIMER_HEADER Timer.hh)
endif()

set(SPATTER_INCLUDE_FILES
    ${BACKEND_INCLUDE_FILES}
    ${CONFIGURATION_HEADER}
    ${INPUT_HEADER}
    ${JSONPARSER_HEADER}
    ${PATTERNPARSER_HEADER}
    ${SPATTERTYPES_HEADER}
    ${ALIGNEDALLOCATOR_HEADER}
    ${TIMER_HEADER}
)

add_library(Spatter STATIC
    ${SPATTER_INCLUDE_FILES}
    ${CONFIGURATION_SOURCE}
    ${JSONPARSER_SOURCE}
    ${PATTERNPARSER_SOURCE}
    ${TIMER_SOURCE}
)

add_library(Spatter_shared SHARED
    ${SPATTER_INCLUDE_FILES}
    ${CONFIGURATION_SOURCE}
    ${JSONPARSER_SOURCE}
    ${PATTERNPARSER_SOURCE}
    ${TIMER_SOURCE}
)

set_target_properties(Spatter PROPERTIES
    COMPILE_DEFINITIONS "${COMMON_COMPILE_DEFINITIONS}"
    COMPILE_OPTIONS "${COMMON_COMPILE_OPTIONS}"
    OUTPUT_NAME "Spatter"
)

set_target_properties(Spatter_shared PROPERTIES
    COMPILE_DEFINITIONS "${COMMON_COMPILE_DEFINITIONS}"
    COMPILE_OPTIONS "${COMMON_COMPILE_OPTIONS}"
    OUTPUT_NAME "Spatter"
)

target_include_directories(Spatter
    PUBLIC
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src>
    $<INSTALL_INTERFACE:include/Spatter>
)

target_include_directories(Spatter_shared
    PUBLIC
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src>
    $<INSTALL_INTERFACE:include/Spatter>
)

if (USE_CUDA)
    set(COMMON_LINK_LIBRARIES ${COMMON_LINK_LIBRARIES} cuda_backend)
elseif (USE_HIP)
    set(COMMON_LINK_LIBRARIES ${COMMON_LINK_LIBRARIES} hip_backend)
endif()

target_link_libraries(Spatter
    PUBLIC
    ${COMMON_LINK_LIBRARIES}
)

target_link_libraries(Spatter_shared
    PUBLIC
    ${COMMON_LINK_LIBRARIES}
)

target_compile_options(Spatter
    PRIVATE ${WARNING_FLAGS}
)

target_compile_options(Spatter_shared
    PRIVATE
    ${WARNING_FLAGS}
)

if (USE_CUDA)
    set_target_properties(cuda_backend PROPERTIES CUDA_RUNTIME_LIBRARY Shared)
elseif (USE_HIP)
    if(TARGET hip_backend)
        set_source_files_properties(HipBackend.cpp PROPERTIES
            LANGUAGE HIP
        )
        target_compile_options(hip_backend PRIVATE
            -x hip
        )
    endif()
endif()
