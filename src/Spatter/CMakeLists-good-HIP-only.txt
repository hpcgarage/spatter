# Spatter/src/Spatter/CMakeLists.txt

# HIP backend (similar to CUDA backend)
if (USE_HIP)
    add_library(hip_backend SHARED HipBackend.cpp)
    set(HIP_INCLUDE_FILES HipBackend.hh)
endif()

# Base include files
set(SPATTER_INCLUDE_FILES 
    ${HIP_INCLUDE_FILES}
    Configuration.hip.hh 
    Input.hip.hh 
    JSONParser.hip.hh 
    PatternParser.hip.hh 
    SpatterTypes.hip.hh 
    AlignedAllocator.hip.hh 
    Timer.hh
)

# Static library
add_library(Spatter STATIC 
    ${SPATTER_INCLUDE_FILES}
    Configuration.hip.cc 
    JSONParser.hip.cc 
    PatternParser.hip.cc 
    Timer.cc
)

# Shared library
add_library(Spatter_shared SHARED 
    ${SPATTER_INCLUDE_FILES}
    Configuration.hip.cc 
    JSONParser.hip.cc 
    PatternParser.hip.cc 
    Timer.hip.cc
)

# Set properties for static library
set_target_properties(Spatter PROPERTIES
    COMPILE_DEFINITIONS "${COMMON_COMPILE_DEFINITIONS}"
    COMPILE_OPTIONS "${COMMON_COMPILE_OPTIONS}"
    OUTPUT_NAME "Spatter"
)

# Set properties for shared library
set_target_properties(Spatter_shared PROPERTIES
    COMPILE_DEFINITIONS "${COMMON_COMPILE_DEFINITIONS}"
    COMPILE_OPTIONS "${COMMON_COMPILE_OPTIONS}"
    OUTPUT_NAME "Spatter"
)

# Include directories for static library
target_include_directories(Spatter PUBLIC
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src>
    $<INSTALL_INTERFACE:include/Spatter>
)

# Include directories for shared library
target_include_directories(Spatter_shared PUBLIC
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src>
    $<INSTALL_INTERFACE:include/Spatter>
)

# Link HIP backend if enabled
if (USE_HIP)
    set(COMMON_LINK_LIBRARIES ${COMMON_LINK_LIBRARIES} hip_backend)
endif()

# Link libraries
target_link_libraries(Spatter PUBLIC ${COMMON_LINK_LIBRARIES})
target_link_libraries(Spatter_shared PUBLIC ${COMMON_LINK_LIBRARIES})

# Add compile options
target_compile_options(Spatter PRIVATE ${WARNING_FLAGS})
target_compile_options(Spatter_shared PRIVATE ${WARNING_FLAGS})

# Set HIP-specific compile options if needed
if (USE_HIP)
    if(TARGET hip_backend)
        set_source_files_properties(HipBackend.cpp PROPERTIES
            LANGUAGE HIP
        )
        target_compile_options(hip_backend PRIVATE 
            -x hip
        )
    endif()
endif()
